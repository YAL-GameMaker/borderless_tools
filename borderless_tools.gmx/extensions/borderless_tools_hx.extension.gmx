<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<extension>
  <name>borderless_tools_hx</name>
  <version>1.0.0</version>
  <packageID></packageID>
  <ProductID></ProductID>
  <date>11/01/22</date>
  <license>Free to use, also for commercial games.</license>
  <description></description>
  <helpfile></helpfile>
  <installdir></installdir>
  <classname></classname>
  <androidclassname></androidclassname>
  <sourcedir></sourcedir>
  <androidsourcedir></androidsourcedir>
  <macsourcedir></macsourcedir>
  <maclinkerflags></maclinkerflags>
  <maccompilerflags></maccompilerflags>
  <androidinject></androidinject>
  <androidmanifestinject></androidmanifestinject>
  <iosplistinject></iosplistinject>
  <androidactivityinject></androidactivityinject>
  <gradleinject></gradleinject>
  <iosSystemFrameworks/>
  <iosThirdPartyFrameworks/>
  <ConfigOptions>
    <Config name="Default">
      <CopyToMask>609239146</CopyToMask>
    </Config>
  </ConfigOptions>
  <androidPermissions/>
  <IncludedResources/>
  <files>
    <file>
      <filename>borderless_tools_hx.gml</filename>
      <origname>extensions\borderless_tools_hx.gml</origname>
      <init>window_frame_init</init>
      <final></final>
      <kind>2</kind>
      <uncompress>0</uncompress>
      <ConfigOptions>
        <Config name="Default">
          <CopyToMask>609239146</CopyToMask>
        </Config>
      </ConfigOptions>
      <ProxyFiles/>
      <functions>
        <function>
          <name>window_frame_init</name>
          <externalName>window_frame_init</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_std_Std_string</name>
          <externalName>window_frame_std_Std_string</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_draw_border_default</name>
          <externalName>window_frame_draw_border_default</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_minimize_lf</name>
          <externalName>window_frame_minimize_lf</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_minimise_lf</name>
          <externalName>window_frame_minimise_lf</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_restore_lf</name>
          <externalName>window_frame_restore_lf</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_set_fullscreen_1_lf</name>
          <externalName>window_frame_set_fullscreen_1_lf</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_set_fullscreen_1_lf1</name>
          <externalName>window_frame_set_fullscreen_1_lf1</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_set_fullscreen_1_lf2</name>
          <externalName>window_frame_set_fullscreen_1_lf2</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_new_lf</name>
          <externalName>window_frame_new_lf</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_create</name>
          <externalName>window_frame_create</externalName>
          <kind>11</kind>
          <help>window_frame_create(...:sprite?)-&gt;window_frame</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_mylog</name>
          <externalName>window_frame_mylog</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_delay0</name>
          <externalName>window_frame_delay0</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_delay1</name>
          <externalName>window_frame_delay1</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_delay2</name>
          <externalName>window_frame_delay2</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_delay3</name>
          <externalName>window_frame_delay3</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_delay4</name>
          <externalName>window_frame_delay4</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_get_active_monitor</name>
          <externalName>window_frame_get_active_monitor</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_minimize</name>
          <externalName>window_frame_minimize</externalName>
          <kind>11</kind>
          <help>window_frame_minimize(this:window_frame)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_minimise</name>
          <externalName>window_frame_minimise</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_is_minimized</name>
          <externalName>window_frame_is_minimized</externalName>
          <kind>11</kind>
          <help>window_frame_is_minimized(this:window_frame)-&gt;any// * Returns whether the window is currently minimized.</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_is_minimised</name>
          <externalName>window_frame_is_minimised</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_maximize</name>
          <externalName>window_frame_maximize</externalName>
          <kind>11</kind>
          <help>window_frame_maximize(this:window_frame)// * Maximizes the window (much like pressing the button would)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_maximise</name>
          <externalName>window_frame_maximise</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_is_maximized</name>
          <externalName>window_frame_is_maximized</externalName>
          <kind>11</kind>
          <help>window_frame_is_maximized(this:window_frame)-&gt;bool// * Returns whether the window is currently maximized.</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_is_maximised</name>
          <externalName>window_frame_is_maximised</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_maximize_1</name>
          <externalName>window_frame_maximize_1</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_store_rect</name>
          <externalName>window_frame_store_rect</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_restore</name>
          <externalName>window_frame_restore</externalName>
          <kind>11</kind>
          <help>window_frame_restore(this:window_frame, _force:bool = false)// * Restores the window to non-maximized, non-full-screen state.</help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_set_fullscreen</name>
          <externalName>window_frame_set_fullscreen</externalName>
          <kind>11</kind>
          <help>window_frame_set_fullscreen(this:window_frame, mode:int)</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_get_fullscreen</name>
          <externalName>window_frame_get_fullscreen</externalName>
          <kind>11</kind>
          <help>window_frame_get_fullscreen(this:window_frame)-&gt;int// Returns the current fullscreen mode</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_set_fullscreen_1</name>
          <externalName>window_frame_set_fullscreen_1</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_set_window_cursor</name>
          <externalName>window_frame_set_window_cursor</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_get_border_width</name>
          <externalName>window_frame_get_border_width</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_get_width</name>
          <externalName>window_frame_get_width</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_get_height</name>
          <externalName>window_frame_get_height</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_get_drag_flags</name>
          <externalName>window_frame_get_drag_flags</externalName>
          <kind>11</kind>
          <help>window_frame_get_drag_flags(this:window_frame)-&gt;int// This returns a non-zero value if a move/resize operation is underway</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_update</name>
          <externalName>window_frame_update</externalName>
          <kind>11</kind>
          <help>window_frame_update(this:window_frame)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_draw</name>
          <externalName>window_frame_draw</externalName>
          <kind>11</kind>
          <help>window_frame_draw(this:window_frame)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_button_ease_inout_expo</name>
          <externalName>window_frame_button_ease_inout_expo</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_button_get_width_default</name>
          <externalName>window_frame_button_get_width_default</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_button_draw_underlay_default</name>
          <externalName>window_frame_button_draw_underlay_default</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_button_draw_icon_default</name>
          <externalName>window_frame_button_draw_icon_default</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_button_new_update</name>
          <externalName>window_frame_button_new_update</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_button_create</name>
          <externalName>window_frame_button_create</externalName>
          <kind>11</kind>
          <help>window_frame_button_create(frame:window_frame, sprite:sprite, subimg:int, onClick:function&lt;button:window_frame_button; void&gt;)-&gt;window_frame_button</help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_add_default_buttons_lf</name>
          <externalName>window_frame_buttons_add_default_buttons_lf</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_add_default_buttons_lf1</name>
          <externalName>window_frame_buttons_add_default_buttons_lf1</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_add_default_buttons_update</name>
          <externalName>window_frame_buttons_add_default_buttons_update</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_add_default_buttons_lf2</name>
          <externalName>window_frame_buttons_add_default_buttons_lf2</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_add_default_buttons_draw_underlay</name>
          <externalName>window_frame_buttons_add_default_buttons_draw_underlay</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_create</name>
          <externalName>window_frame_buttons_create</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_add</name>
          <externalName>window_frame_buttons_add</externalName>
          <kind>11</kind>
          <help>window_frame_buttons_add(this:window_frame_buttons, button:window_frame_button)-&gt;window_frame_button</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_get_width</name>
          <externalName>window_frame_buttons_get_width</externalName>
          <kind>11</kind>
          <help>window_frame_buttons_get_width(this:window_frame_buttons)-&gt;int// Returns combined width of all buttons</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_get_x</name>
          <externalName>window_frame_buttons_get_x</externalName>
          <kind>11</kind>
          <help>window_frame_buttons_get_x(this:window_frame_buttons, width:int)-&gt;int// Returns where the window buttons should be, given the specified window width</help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_reset</name>
          <externalName>window_frame_buttons_reset</externalName>
          <kind>11</kind>
          <help>window_frame_buttons_reset(this:window_frame_buttons)// Un-presses and un-hovers every button</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_update</name>
          <externalName>window_frame_buttons_update</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_draw</name>
          <externalName>window_frame_buttons_draw</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>4</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_add_default_buttons</name>
          <externalName>window_frame_buttons_add_default_buttons</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_buttons_wait_for_movement_create</name>
          <externalName>window_frame_buttons_wait_for_movement_create</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_caption_draw_caption_rect_default</name>
          <externalName>window_frame_caption_draw_caption_rect_default</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>6</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_caption_draw_caption_text_default</name>
          <externalName>window_frame_caption_draw_caption_text_default</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>5</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_caption_create</name>
          <externalName>window_frame_caption_create</externalName>
          <kind>11</kind>
          <help>window_frame_caption_create(frame:window_frame)-&gt;window_frame_caption</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_caption_get_height</name>
          <externalName>window_frame_caption_get_height</externalName>
          <kind>11</kind>
          <help>window_frame_caption_get_height(this:window_frame_caption)-&gt;int// Returns current height (depending on whether the window is maximized)</help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_cover_create</name>
          <externalName>window_frame_cover_create</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_cover_ensure</name>
          <externalName>window_frame_cover_ensure</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_delay_create</name>
          <externalName>window_frame_delay_create</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>0</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_delay_add</name>
          <externalName>window_frame_delay_add</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>window_frame_delay_update</name>
          <externalName>window_frame_delay_update</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_drag_create</name>
          <externalName>window_frame_drag_create</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_drag_start</name>
          <externalName>window_frame_drag_start</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_drag_stop</name>
          <externalName>window_frame_drag_stop</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_drag_update</name>
          <externalName>window_frame_drag_update</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_helpers_draw9slice</name>
          <externalName>window_frame_helpers_draw9slice</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>9</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_window_frame_rect_window_frame_rect_impl___new</name>
          <externalName>_window_frame_rect_window_frame_rect_impl___new</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>-1</argCount>
          <args/>
        </function>
        <function>
          <name>_window_frame_rect_window_frame_rect_impl__get_window_rect</name>
          <externalName>_window_frame_rect_window_frame_rect_impl__get_window_rect</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_window_frame_rect_window_frame_rect_impl__set_window_rect</name>
          <externalName>_window_frame_rect_window_frame_rect_impl__set_window_rect</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>1</argCount>
          <args>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_window_frame_rect_window_frame_rect_impl__equals</name>
          <externalName>_window_frame_rect_window_frame_rect_impl__equals</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>_window_frame_rect_window_frame_rect_impl__set_to</name>
          <externalName>_window_frame_rect_window_frame_rect_impl__set_to</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_std_haxe_class_create</name>
          <externalName>window_frame_std_haxe_class_create</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_std_gml_internal_ArrayImpl_push</name>
          <externalName>window_frame_std_gml_internal_ArrayImpl_push</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_std_haxe_boot_wget</name>
          <externalName>window_frame_std_haxe_boot_wget</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>2</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
        <function>
          <name>window_frame_std_haxe_boot_wset</name>
          <externalName>window_frame_std_haxe_boot_wset</externalName>
          <kind>11</kind>
          <help></help>
          <returnType>2</returnType>
          <argCount>3</argCount>
          <args>
            <arg>2</arg>
            <arg>2</arg>
            <arg>2</arg>
          </args>
        </function>
      </functions>
      <constants>
        <constant>
          <name>window_frame_get_active_monitor_list</name>
          <value>g_window_frame_get_active_monitor_list</value>
          <hidden>-1</hidden>
        </constant>
        <constant>
          <name>window_frame_debug</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_debug /* (index) * @dmdPrefix Essentials:
	 * If enabled, logs semi-important events. */</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_blend</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_blend /* (index) Can be set to quickly apply color blending to default elements */</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_alpha</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_alpha /* (index) Can be set to quickly apply an alpha multiplier to default elements */</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_mouse_over_frame</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_mouse_over_frame /* (index) Can be read to figure out whether the mouse is currently over the border/titlebar - you should not be handling mouse press events when it is */</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_can_input</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_can_input /* (index) * Can be set to `false` to disable all input polling.
	 * A common use case is to fade out the frame (using [alpha]) and disable polling
	 * when your game is in "play" state to avoid dealing with window border UI. */</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_can_resize</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_can_resize /* (index) Can be set to `false` to disable resizing and maximize/restore button */</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_border</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_border /* (index) * @dmdPrefix Sprites:
	 * Outer window border (9-slice, 2 frames - inactive, active) */</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_caption</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_caption /* (index) Window caption (9-slice, 2 frames - inactive, active) */</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_buttons</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_buttons /* (index) Window button icons (4 frames - minimize, maximize, restore, close) */</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_pixel</name>
          <value>10</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_spr_pixel /* (index) A white square to be stretched when drawing colored rectangles */</name>
          <value>10</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons</name>
          <value>11</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons /* (index) * @dmdPrefix Controllers:
	 * A reference to the window button controller ([WindowFrameButtons]) */</name>
          <value>11</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption</name>
          <value>12</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption /* (index)  */</name>
          <value>12</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_resize_padding</name>
          <value>17</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_resize_padding /* (index) Clicking this close (in pixels) to the window edge initiates the resize operation, if enabled */</name>
          <value>17</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_border_width</name>
          <value>18</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_border_width /* (index) Effective width of window border, used for deciding where to draw the wiindow buttons */</name>
          <value>18</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_default_cursor</name>
          <value>19</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_default_cursor /* (index) The cursor to use while the mouse isn't over the window border */</name>
          <value>19</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_set_cursor</name>
          <value>20</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_set_cursor /* (index) If set to false, the extension will not try changing the cursor at all */</name>
          <value>20</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_current_cursor</name>
          <value>21</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_current_cursor /* (index) If setCursor is false, you can read this to see what cursor the extension wanted to show */</name>
          <value>21</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_draw_border</name>
          <value>25</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_draw_border /* (index) * @dmdPrefix Drawing callbacks:
	 * Is called to draw the outer window border.  
	 * By default, this will draw [sprBorder]. */</name>
          <value>25</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_frame</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_frame /* (index)  */</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_sprite</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_sprite /* (index)  */</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_subimg</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_subimg /* (index)  */</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_margin_left</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_margin_left /* (index)  */</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_margin_right</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_margin_right /* (index)  */</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_hover</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_hover /* (index) Indicates whether the mouse is over the button. */</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_pressed</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_pressed /* (index) Indicates whether the button is currently being held down. */</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_enabled</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_enabled /* (index) Indicates whether the button is active (setting to `false` disables). */</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_fade</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_fade /* (index) A helper variable for fade effect, usually modified by [drawUnderlay]. */</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_click</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_click /* (index) Executed when the button is clicked. */</name>
          <value>9</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_get_width</name>
          <value>10</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_get_width /* (index) * Should return the button's width, in pixels.  
	 * By default, returns the button sprite's width. */</name>
          <value>10</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_update</name>
          <value>11</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_update /* (index) * Ran during update loop.  
	 * Can be used for things like changing [sprite](sprite)/[subimg]/[enabled] to reflect button's state. */</name>
          <value>11</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_draw_underlay</name>
          <value>12</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_draw_underlay /* (index) * Should draw the button underlay at specified location.  
	 * By default, draws a rectangle and does fade in/out based on button state.  
	 * Note that the default "close" button has its own handler for a red highlight! */</name>
          <value>12</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_draw_icon</name>
          <value>13</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_button_draw_icon /* (index) * Should draw the button icon at the specified location.  
	 * By default, this draws the button's sprite amid the area. */</name>
          <value>13</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_frame</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_frame /* (index)  */</name>
          <value>0</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_buttons</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_buttons /* (index) The buttons themselves */</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_minimize</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_minimize /* (index)  */</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_maxrest</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_maxrest /* (index)  */</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_close</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_buttons_close /* (index)  */</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_frame</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_frame /* (index)  */</name>
          <value>1</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_text</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_text /* (index) * Drawn in caption area by the default [drawText].  
	 * Is initially set to value of `window_get_caption()`. */</name>
          <value>2</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_font</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_font /* (index) If set, is used for drawing the above */</name>
          <value>3</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_icon</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_icon /* (index) If set, drawn in caption area by the default [drawText] */</name>
          <value>4</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_height_normal</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_height_normal /* (index) Titlebar area height, in pixels. Defaults to [Frame.sprCaption]'s height */</name>
          <value>5</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_height_maximized</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_height_maximized /* (index) Titlebar area height while maximized, in pixels. Defaults to 2/3 of [Frame.sprCaption]'s height */</name>
          <value>6</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_draw_background</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_draw_background /* (index) * Is called to draw the window caption background.  
	 * By default, this will draw [WindowFrame.sprCaption] */</name>
          <value>7</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_draw_text</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
        <constant>
          <name>window_frame_caption_draw_text /* (index) * Is called to draw the window caption text.  
	 * By default, this will draw [captionIcon] and [captionText] using [captionFont]. */</name>
          <value>8</value>
          <hidden>0</hidden>
        </constant>
      </constants>
    </file>
  </files>
</extension>
